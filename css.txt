CSS
위아래가 존재한다 
우선순위

type은 태그의 다른 말이다.
둘은 같은 말이다 웹에서
타입은 곧 태그다.
<head>
  <style>
    body{
      /* font-size: 16px; */
      color: gray;
    }
    h1{
      color: red;
    }
    abbr{
      color: blue;
    }
    h3{
      color: green;
    }
    .style1{
      color: pink;
    }
    #id1{
      color: aqua;
    }
    .style{
      font-family: '휴먼둥근헤드라인';
      font-size: 30px;
      font-weight: bold;
      text-decoration: underline;
      font-style: italic;
      letter-spacing: 30px;
      background-color:rgb(31, 27, 35
      )

    }
  </style>
</head>

<body>
  <main>
    <section>
      <h1>
        <abbr>CSS</abbr>
        <small>Cascading Style Sheet</small>
      </h1>
      <p>우선순위와 상속이 존재하는 디자인 양식</p>
    </section>
    <hr>
    <section>
      <h2>type선택자(태그선택자)</h2>
      <article>
        <h3>사용법</h3>
        <p>
          태그명{속성:값} 형태로 선언 
        </p>
      </article>
      <article>
        <h3>특징</h3>
        <ul>
          <li>동일한 태그에 모두 적용됨</li>
          <li>자식태그선택자가 우선순위가 높다</li>
          <li>agent style과 겹칠 수 있다</li>
        </ul>
      </article>
    </section>
    <hr>

    <section>
      <h2>class 선택자</h2>
      <article>
        <h3 class="style1">사용법</h3>
        <p>
          .클래스명{속성:속성값;}을 이용해서 선언 후
          class속성을 이용해서 호출
        </p>
      </article>

      <article>
        <h3 class="style1" id="id1">특징</h3>
        <ul>
          <li>타입선택자보자 우선순위가 높다</li>
          <li>반복호출이 가능하다</li>
          <li>수정관리가 용이하다</li>
        </ul>
      </article>

    </section>
    <hr>

    <section>
      <h2>id선택자</h2>
      <article>
        <h3>사용법</h3>
        <p>
          #아이디명{속성:속성값;} 선언 후,
          id속성을 이용해서 호출
        </p>
      </article>
      <article>
        <h3>특징</h3>
        <ul>
          <li>클래스선택자보다 우선순위가 높음</li>
          <li>반복호출이 허락되지 않으며, 수정관리가 어려움</li>
          <li>html문법이나 프로그램용도로 사용</li>
        </ul>
      </article>
    </section>
    <hr>

    <section>
      <h2>inline 스타일</h2>
      <article>
        <h3 style="color:blueviolet;">사용법</h3>
        <p>요소의 stlye속성을 지정 후 css를 작성</p>
      </article>
      <article>
        <h3>특징</h3>
        <ul>
          <li>우선순위가 id보다 높음</li>
          <li>스크립트를 이용해 css를 제어하는 데 사용</li>
        </ul>
      </article>
    </section>
    <hr>
    <section>
      <h2><span style="color:red;">c</span>ss의 특징</h2>
      <ul>
        <li>요소단위로 css가 적용됨</li>
        <li>우선순위: 인라인스타일, id, class, 자식태그, 부모태그</li>
        <li>글자정렬, 글자관련 스타일은 상속이 된다</li>
      </ul>
    </section>
    <hr>
    <section>
      <h2>가상클래스</h2>
      <p>css rule에서 정의된 클래스명</p>
      <div class="box"></div>
    </section>
    <span class="style">span</span>
  </main>  
</body>


섹션 안에 article 분할 시맨틱

태그명{속성:값} css 문법
agent stylesheet 브라우저가 기본적으로 정한 것

상속 글자 색 상속이 된다. 
글자 관련된 건 웬만한 건 다 상속이 된다.
상속은 되는 속성이 있고 안 되는 속성이 있다.
부모에서 자식으로만 상속된다.

부모 선택자보다 자식 선택자 우선 순위가 더 높다.

css에서 class은 그룹
숫자가 먼저 나오면 안 된다.
클래스명에 띄어쓰기가 나오면 안 된다.
클래스는 반복 호출이 가능하다.
수정관리가 용이하다

선언 - 만든다
호출 - 사용한다

id는 학번으로 생각
id는 반복해서 사용할 수 없다.
수정관리가 힘들다.
html 기능상 써야 할 때가 있다.
코딩의 필요성 때문에 사용한다.
샵 #이 붙는다.

인라인 스타일은 자바스크립트로 css를 변경할 때 사용된다.
자바스크립트는 인라인 스타일로 css로 


span 의미가 없다는 태그
css사용하려면 요소로 반드시 만들어야 함.

자간 letter-spacing
한글 쓸 때 ''따옴표 해주기

가상클래스
.box: 콜론이 붙으면 콜론 뒤로 가상클래스라고 함.
마우스가 엘리먼트... 
만들어진 클래스
특정한 선택자들을 찾고 싶을 때 사용함


    <div class="ex">
      <small>small</small>
      <b>bold</b>
      <span>span</span>
      <em>em</em>
      <i>italic</i>
    </div>

   .ex  *:hover {
      color: red;
    }

----------------------------
선택자의 조합
div 레이아웃 만들 때 아무 의미 없는 박스
조직 이름 class
독립적인 이름 id

다중호출은 여백주고 class나 id 이름을 써 준다. 
span 

<head>
  <style>
    div.style1{
      color: red;
    }
    .style2{
      text-decoration: underline;
    }
    .style1{
      color: blue;
    }
  </style>
</head>

css 마지막으로 코딩 쓴 게 우선순위가 높다.

<body>
  <main>
    <h1>선택자의 조합</h1>
    <ul>
      <li>클래스나 아이디를 호출시 여백을 이용해서 다수의 클래스명을 연결,
        id는 한개만 지정 가능</li>
      <li>combine선택자 : 여러선택자를 연결하는 방식</li>
      <li>
        쉼표조합선택자 : 
        쉼표를 이용해서 다수의 선택자를 연결
      </li>
      <li>
        자손(decendent)선택자 :
        여백을 이용한 선택자
      </li>
      <li>
        자식(children)선택자 :
        &gt;기호를 이용한 선택자
      </li>
      <li>
        전체(universal)선택자 : * 전부 다
      </li>
    </ul>

    <hr>
    <div class="style1">style1</div>
    <div class="style2">style2</div>
    <div class="style1 style2">style1,style2</div>
    <span class="style1">span</span>
  </main>
</body>
</html>

div#id1.style1
div.style1{
      color: red;
    }
div(태그명)이면서 style1이다.
연결 선택자가 우선순위가 더 높아진다.
컴바인, combine 선택자
연결선택자에서 태그(태그명, 타입)는 무조건 앞에 와야 한다.

span.style1{
      color: blue;
    }

    .style1.style2{
      text-decoration: underline;
    }  
style1이면서 style2인 것(순서 상관 없음)

크기는 단위가 필요함
넓이 width 
높이 height

.box1, .box2{
      width: 300px; 
      height: 300px;
      background-color: red;
    }
.box1 그리고 .box2
css 연결할 때 사용하는 쉼표
div.box1, .box2



    .box1 div{
      width: 200px;
      height: 200px;
      background-color: blue;
    }
box1 안에 div인 것.


* 전부 다 찾을 때 사용함

하나를 수정할 때 다 수정이 되도록 사용하기 위해

html, css에는 엔터는 띄어쓰기 (쉼표 붙을 때만 사용하기)

호출할 때 쓰는 띄어쓰기는 : 그리고의 의미. css의 ,쉼표와 같은 의미이다.
선택자를 선언할 때 쓰는 띄어쓰기는 : 안에라는 의미.



    .box1 > div, 
    .box2 > div{
      width: 200px;
      height: 200px;
      background-color: blue;
    }
> 자식 찾을 때 사용함

    .box1>div>div,
    .box2>div>div{
      width: 100px;
      height: 100px;
      background-color: black;
    }

----------------------------
<link rel="stylesheet" href="./style.css">
외부 스타일 연결할 때 link 사용

릴레이션십 rel
컴바인선택자가 연결선택자


.ex1 div span.style{
  color: red;
}

    <article class="ex1">
      <h1>자손선택자와 컴바인선택자</h1>
      <p>첫번째 span글자를 빨갛게</p>
      <div>
        <span class="style">span</span>
        <span>span</span>
      </div>
      <span class="style">span</span>
      <div>
        <small class="style">small</small>
      </div>
    </article>

.ex2 * * {
 color: red;
}


adjacent 인접한 + 
general 일반적인 ~ 동생들 


<article class="ex3">
      <h3>general siblings</h3>
      <p>~, 뒷쪽 형제요소 전체를 선택</p>
      <p>3. 1,2,3을 빨갛게</p>
      <div>
        <i>1</i>
        <u>2</u>
        <b>3</b>
      </div>
      <div>
        <i>4</i>
        <u>5</u>
        <b>6</b>
      </div>
    </article>

.ex3 div ~ div *{
  color: red;
} 
4,5,6 선택

.ex3 p + div * {
  color: red;
}
1,2,3을 빨갛게

:first-child
첫번째 자식 
ex) *:first-child

child가 종족을 안 가리고 따진다. 남녀통합해서  
of-type 같은 애들끼리 따진다. 남자 따로 여자 따로 


    <article class="ex4">
      <p>4. 1,4을 빨갛게(first-child)</p>
      <div>
        <i>1</i>
        <u>2</u>
        <b>3</b>
      </div>
      <div>
        <q>4</q>
        <u>5</u>
        <b>6</b>
      </div>
    </article>

.ex4 div *:first-child{
  color: red;
}

가상클래스에서만 앞에서 * 생략 가능!!

:last-child 마지막 애들 막내
:last-of-type 



.ex5 p~div:last-child{
  color: red;
}

    <article class="ex5">
      <p>5. 4,5,6을 빨갛게</p>
      <div>
        <div><i>1</i></div>
        <div><u>2</u></div>
        <div><b>3</b></div>
      </div>
      <div>
        <div><i>4</i></div>
        <div><u>5</u></div>
        <div><b>6</b></div>
      </div>
    </article>

css dinner - css 연습할 수 있는 사이트 


----------------------------

:nth-child(숫자)
nth 몇 번째 무조건 괄호 사용해야 함
ex) plate:nth-child(3)

.ex6 div:nth-child(3) *{
  background-color: red;
}

child 모두 혼성 전부 다 포함 

뒤로부터 몇 번째
:nth-last-child()

.ex8 div :nth-last-child(4) ~ *{
  background-color: yellow;
}
ex8 안에 div에 있는 4번째 자식 뒤로부터 전부 다


짝수 even
홀수 odd

:not()
얘만 빼고 전부 다

:not() 괄호안에 가상 클래스 적을 수 없다

.ex10 div:nth-of-type(1) 
ex10안에 div에 

attribute 속성

속성을 이용하겠다
[attribute]

이 속성을 갖고 있는 애들 다 골라라.
*[for]
*생략가능

[attribute="value"]
특정 속성과 반드시 value이 값과 일치하는 애

[attribute^="value"]
^이 단어로 시작되는 말

[attribute$="value"]
$ 속성값이 끝나는 거

[attribute*="value"]
*포함이 돼 있는 거

:nth-of-type(An+B)
n = 숫자 
영원한 등차수열로 선택

:nth-child(An+B)

An+B
=등차n+시작번호
이렇게 외우기

----------------------------
파일 만들 때 한글이나 띄어쓰기 사용하지 말 것
css가 복잡한 이유
 전에 했던 걸 유지하면서 새로운 기능이 추가됐기 때문에...

css 부트스트랩
자유도 떨어짐.
모양을 바꾸려고 할 때는 쓰기 어려움.
기본 문법 완벽히 이해해야 함.

display level
출력 방식, 반드시 구분해야 한다!

1.block level
 기본적으로 한 줄을 통째로 차지하는 애들
100% 부모 기준
옆에 아무도 못 옴. 혼자 산다.
width, height 적용됨, 크기를 가질 수 있다.
main

2.inline level
 한줄로 출력 
크기라는 요소의 개념이 적용 안 됨(크기 안 됨)


3.inline-block
 한줄로 출력되는 요소
크기속성이 적용됨
 input
 button

inline-block의 해당 요소 암기하기(확실히 알기!)

mdn 공식문서에 가서 찾기

인라인 레벨 안에 블럭 레벨 사용 불가(문법)

폼요소들은 다 인라인-블럭이다.
이미지, 동영상 

<img, input, select, textarea, button, iframe, svg, video>
꼭 외우기!

와이어프레임
박스 구조를 봐야 한다.
인라인, 인라인-블럭은 박스당 1글자로 본다.

vertical-align: middle;
수직 정렬
인라인 레벨일 때 사용

행간
line-height: ;
행간을 엘리먼트와 동일한 높이를 주면 가운데 정렬이 된다.
한줄일 때 사용가능
글자를 위 아래로 

글자는 부모가 옮겨준다.
블럭레벨은 자기가 움직인다.
margin 간격
margin-left:auto;
오른쪽으로 간다.
margin:auto; 
왼쪽으로 간다. 기본값

margin:0 0;

margin-left:auto;
margin-right:auto;
둘 다 적으면 중앙정렬

margin:0 auto;
중앙정렬

----------------------------
인라인, 인라인-블럭 레벨은 한칸 띄어쓰기 된다.(여백현상)
글자 여백 때문에 정확한 레이아웃이 안 나온다.
내 마음대로 간격 조절이 어려움

높이를 지정 안 해야 할 때가 많다.
알아서 늘어나고 줄어들게 하기 위해 높이는 지정하지 않는다.

넓이는 부모로부터 계산하는 게 편하다. 

높이는 안쪽에서 바깥쪽으로 계산

안쪽여백을 패딩
바깥쪽 거리 마진

block 레벨은 마진 상하가 형제들 개념
첫번째는 top이 안 되고 
마지막은 bottom이 안 된다.
부모 객체에 패딩이나 테두리가 있으면 그 원칙이 깨진다.

box-sizing: border-box;
객체 안쪽으로 패딩과 보더가 적용된다.

block레벨일 때만  margin의 겹침

인라인 레벨은 margin, padding 위 아래 적용이 안 된다.

정확한 레이아웃을 만들려면 블럭 레벨이랑..


중앙이나 오른쪽끝으로 보낼 때는 auto가 사용하기 편하다.


----------------------------
플랙스 - 레이아웃을 배치하는 css
박스를 배치하는 요령
그리드 시스템
포지션

flex - css3에 나온 새로운 기능
웹사이트 만들 때 필요
유연하다, 다양한

flex는 부모한테 적용한다.

display: flex;
블럭레벨과 같다.
자식들은 flex 안의 자식 (블럭, 인라인, 인라인-블럭이 아니다)

확실한 속성 알고 적기

flex-direction: row;
기본값(디폴트)

column

flex-direction: column;

reverse
거꾸로 순서가 바뀐다.
위치와 순서가 바뀐다.

flex-direction이 축 row
부모의 높이와 동일하게 변한다. 높이를 지정이 안 된 경우

flex-direction이 축 column
부모의 넓이와 동일하게 변한다. 넓이를 지정이 안 된 경우



동일하다 =  스트레칭 된다.

----------------------------
테스트 코딩 해야 함.
암기 필요.

span{$}*3

margin을 주면 넓이가 변한다.(넓이를 지정하지 않았을 경우)

justify-content - 자식요소 위치 바꾸는 거

flex-start - 위
center - 중앙
flex-end - 아래
space-between : 분할


----------------------------
auto 좌우 정렬만 됨.(수직 적용 안 됨.)
flex안에서는 상하, 좌우 다 사용 가능.

align-items
1.축의 위치를 바꾸는 거
2.객체 높이를 없애는 기능(원래대로)

align-items: stretch;
기본값, 디폴트값

display: flex; 안에서 못 벗어남
flex 속성 -넓이를 결정. 알아서 넓이를 가져가라.
flex속성이 들어가면 따로 넓이가 적용 안 됨
남는 넓이를 가진다.

flex : none; 을 적용하면 크기를 지정할 수 있다.

flex-wrap: wrap;
여러 축 사용
nowrap,wrap

inline-flex
부모에게 넓이나 높이를 주면 안 된다.


overflow: scroll;

----------------------------
문법과 css는 별개이다!

flex 내 자식들의 레이아웃 속성을 바꾼다.

display: inline-flex;
부모의 넓이가 사라짐.
자식의 넓이에 따라서 부모의 넓이가 바뀌는 거.
인라인은 옆이 한줄.(옆으로 배치할 때만 사용함)
부모에게 크기를 주면 안 됨.

row, row-reverse 높이가 같아짐
column, column-reverse 넓이가 같아짐


  flex-direction: column-reverse;
  align-items: center;
  justify-content: center;

축의 방향과 위치를 먼저 정하고 자식요소의 위치를 바꾼다.

flex 속성
남는 넓이,높이를 알아서 가져라
축이 column 높이를 알아서 가져라(높이 못 줌)
축이 row일 때는 넓이를 알아서 가져라(넓이 못 줌)

같은 값을 주면 니들끼리 알아서 가져라.

----------------------------
float속성

레이아웃을 크게 박스 형태로 그리드 레이아웃
옆쪽으로 배치 -그리드 레이아웃이라고 함
요즘은 flex 레이아웃을 사용함.
이전에는 float을 사용함. float이 사용하기 편한 레이아웃이 있다.

그리드
website grid design 검색해보기

flex는 높이가 동일할 때 사용(가장 많이 사용됨, 단순한 거)
높이가 다를 때 float(다른 레이아웃과 합쳐서 높이가 딱 떨어질 때, 구멍이 뚫려 있을 때), grid
더 복잡한 넓이 높이가 섞여 있으면 grid

ul, li 사용함 
비슷한 내용을 만들 때

높이가 다른 격자를 쓸 때 사용 float, grid
높이, 넓이 다르면 grid
더하기,빼기가 나와야 한다.

ul,li는 만들 때부터 마진하고 패딩이 다 적용되어 있다.(agent style)


float은 둘 다 줘야 한다.
자식한테 준다.
무조건 수평배치가 목적이다.
float : left;
left 
right

자식에게 float이 적용되면 부모의 높이가 없어진다.
부모가 알아서 늘어나야 한다.
clearfix

float 형제들과 나란히 서겠다.
clear는 관계를 끊겠다. clear: both;

clear: both;가 되면 부모가 높이를 인식한다.
가장 마지막에 clear 속성을 사용해야 함.

.container1::after{
  content: ""; 
}

/* clearfix */
.container1::after{
  content: "";
  display: block;
  clear: both;
->이 방법을 clearfix라고 한다.
표준 방법임.

:: 가상 요소, 인라인 레벨이라서 clear: both;가 불가능 
그래서 display를 block으로 바꿔줌
content: ""; -> 내용이 없는 엘리먼트를 만들겠다.

overflow: auto;
scroll바 만드는 목적으로 사용하는 것임.
float과 충돌이 생겨서 잘 사용 안 함.

<pre>글자로 인식함 br 쓰기 싫을 때 html 문법

float이 적용되면 더 이상 block레벨은 block이 아니다.

clear는 위쪽과 관련
float은 내 아래쪽과 관련
둘다 사용 가능
부모는 clearfix 해준다.

----------------------------
float은 높이가 중요하다. (높이가 다를 때 사용)
넓이, 높이가 다 다르면 grid 사용
grid는 제약이 심하다.
자유로운 레이아웃 만들기 힘들다

grid 레이아웃 만드는 방법
내가 원하는 바둑판을 만든다.(격자)
규격에 맞게 원하는 박스를 만든다
무조건 사각형만 나온다

장점 - 박스 순서까지 마음대로 배치 가능 


grid는 부모한테 해준다.

col 칸
row 줄


.container1{
  display: grid; /* 바둑판 되겠다 선언 */
  grid-template-columns: 100px 100px 100px;
  grid-template-rows: 100px 100px 100px;
  width: 300px;
  margin: 30px auto;
  border: 1px solid black;
}

grid-template-columns: 100px 100px 100px;
width: 300px;
넓이는 맞춰야 한다.

grid-template-columns: auto auto auto;
grid-template-columns: 1fr 1fr 1fr;

auto -   
1fr - flex 계산식과 유사함

grid-template-columns: repeat(3,auto);
=grid-template-columns: auto auto auto; 같은 의미이다


grid-template-rows: repeat(3,1fr);
=grid-template-rows: 100px 100px 100px; 같은 의미이다


표현방식 3가지 정도 됨 (table과 동일한 구조)

grid-row: 1/2;
1번째 줄에서 2번째 줄 이전에 끝난다.
뉴머릭?으로 구분

grid-column: 1/span 2;
span -합치다의 뜻
1번째 칸에서 2번째 칸에 끝난다.

본인이 편한 방식으로 사용하면 됨


grid-area: 3줄 시작/칸 시작/4줄 끝/칸 끝; 
row 먼저 적음  


컨테이너 안에 넣는다
gap: 10px; 
안쪽 여백을 줄 수 있다

writing-mode: sideways-rl;

writing-mode: vertical-lr;
세로로 쓸 때 글자를

text-orientation: upright;
세로에서 abc 글자를 똑바로 세울 때 사용

----------------------------
position

html은 벽돌쌓기
it 문서 중력이 위로 당긴다.
객체가 새로 만들면 아래쪽에 생기는 이유는 서로 관계가 있다

특정한 좌표로 옮기는 것 ->position
사용할 때 조심해야 한다.
하나를 잘못 지정하면 전부 문제가 생긴다.
다른 애들에게 영향을 미치면 사용하면 안 된다.
(마지막)최후의 수단으로 사용

position: static; ->디폴트, 기본값

position: absolute;
display속성이 사라짐, 귀신같은 존재, block도 아니고 inline-block도 아니다.
앞쪽으로 빠져 나온다. z축(가상의 축)으로 나온다, 독립적은 위치, 서로 영향을 안 주는 것이 목적.
레이아웃이 달라진다.
절대 위치

position이라는 속성이 들어갈 때만 좌표를 넣어준다!

left: calc(50% - 50px);
단위 달라고 계산할 수 있게 calc를 사용함(중앙 정렬도 할 수 있다)
연산자는 앞뒤로 띄어줘야 한다.

position이라는 성격을 갖게 되면 z축이 생긴다.(앞뒤)
z축이 적용됨

좌표의 기준점이 있다.

position: fixed;

스크롤은 문서의 위치를 바꾼다(문서가 브라우저보다 클 때 생김)

absolute는 좌표기준은 document 문서 기준이다.
문서가 움직일 때 같이 움직인다.

fixed는 좌표기준은 브라우저 기준이다.
화면 밖으로 나가면 찾을 수 없다.
스크롤의 영향을 받지 않는다
fixed는 무조건 브라우저를 찾아간다.


position은 마지막에 나온 애가 무조건 앞으로 나온다.
이거를 바꾸주는 게 z-index이다.

!!absolute와 fixed의 차이점
좌표 기준점이 다르다!


position: relative;
사용 목적
1.현재 레이아웃 그대로 유지하면서 포지션을 가질 수 있다.
(자식을 위해 포지션을 준다)
display 속성을 그대로 유지한채로 포지션을 가진다.

태어날 때 위치가 0이다.
상대 (자기 기준)

2.


----------------------------
height 높이의 %는 부모의 높이가 있을 때만 준다.
부모 높이가 없으면 불가능한데 가능한 경우는 position이 absolute나 fixed일 경우 부모의 반절 높이를 줄 수 있다!!


한번 더 싸줘야 한다.(하나로 묶어야 한다)

.ex2 div::before{
  content: '';
  position: absolute;
  top: -15px;
  left: calc(50% - 15px);
/*   display: inline-block; */ 
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background: yellow;
}

/* 가상 엘리먼트 6개 div 앞쪽에 
content: '';를 꼭 넣어줘야 가상 엘리먼트가 생긴다
가상 엘리먼트 인라인 레벨이다 
position을 주면 display는 
block, inline, inline-block을 사용하면 안 된다!!
display flex는 자식요소한테 사용하는 거라 사용 가능하다*/


body에도 여백이 있다.
태그마다 마진 패딩이 다 들어 있다.
여백을 없애려면 마진, 패딩 다 0으로 해주면 된다.


position-sticky
특정시점에서 fixed를 하고 싶다 -> sticky
relative와 같다.
relative에서 특정시점에 fixed로 변경 
고정되어 있는 한계점이 부모요소이다
부모요소 밖으로 못 벗어남

<ul>
    <li>브라우저 특정 좌표 기준으로 fixed속성으로 설정</li>
    <li>부모요소 안쪽에서만 fixed속성이 적용됨</li>
    <li>sticky요소의 상위요소에는 overflow가 적용되면 안됨</li>
  </ul>

position 사용하면 z-index가 생긴다

----------------------------
transform
현재 레이아웃에 영향을 안 주고 변형이 일어난다.
화면에 출력 -> 랜더링
랜더링에만 변화가 일어난다.

비유를 착시...

transform: scale(2); =>transform: scale(200%); 같은 말

레이아웃에는 변화가 없는 상태에서 렌더링에 변화를 준다
시각적으로 

scale 커지는 거

rotate 회전 
왼쪽 - 
오른쪽 + 

translate(x,y) 위치변화
translateX(좌우)수평
translateY(상하)수직

opacity: 0.5; /* 불투명도 100% = 1이다 */

프로퍼티(속성) ->css에서 

transition 전환 효과


사용목적
css 프로퍼티가 변하는 시간을 설정

transition 지정하는 위치 중요

----------------------------
transition
시작점과 끝나는 지점 정해야 한다
반복 불가, 복잡한 거 불가
한번하고 끝

카페24 디자인 센터

animation
반복적이고 복잡한 행동(무한 반복)

animation, keyframes 
같이 사용

섞어 쓰면 안 됨
left면 left로 계산해야 함

모션 미리 세팅해야 함

@keyframes
동작 -> 애니메이션을 만들겠다.

@keyframes move{
  
}
move는 그냥 이름 내가 정하는 거

시작은 0% 
끝이 100%


alternate;(animation 방향 토글

자연스러운 걸 원할 때는 안 됨

animation 중지됐을 경우 바로 초기화 -> transition과 가장  큰 차이점

----------------------------
media query 미디어쿼리 ->css의 꽃...

반응형 웹 -> 요즘 트렌드임, 무조건 사용함 

화면에 따라서 자동으로 크기가 커지고 작아지는 것

모바일 사이트를 따로 만든다.
(돈이 많이 든다)
따로 만드는 게 편하다

멀티 인터페이스 
UI 유저 인터페이스, 사용자 환경

사람들이 반응형 웹이 어려워서 부트스트랩, 프레임워크를 사용함


반응형 웹 잘 만들려면 화면 설계를 굉장히 잘해야 한다!
1.화면 설계를 미리 해야 한다!!(계획 단계별로)
큰 화면, 작은 화면 같이 만들어야 한다!!(어려움) 
화면 크기 따로 따로 생각하면 안 된다.


<meta name="viewport" content="width=device-width, initial-scale=1.0">

viewport

화면 넓이 = 해상도

모니터를 초압축 -> 휴대전화 액정

initial-scale=1.0
비율

viewport : 모바일 디바이스 브라우저에서 해상도를 최적화해주는 것

아이폰se가 화면이 가장 작기 때문에 
이 화면을 기준으로 만든다 반응형 웹을

화면 주로 넓이로 생각함

ux 사용자 경험

사용자들이 경험한 대로 만들어라, ux를 중요시함

@media screen and () {}

@media screen and (min-width:1000px) {
  body{
    background: red;
  }
}

min-width:1000px 
->최소 넓이 1000이상

min 이상


css는 연습을 많이 하는 방법밖에 없음..

>=
>

css 우선 순위는 아래쪽에 쓴 것이 먼저 적용된다.


피해야 하는 숫자가 있다.
375px  아이폰 se 화면 크기

핸드폰 크기 숫자는 다 피해야 한다, 안 그러면 화면이 깨져 보인다.
(디바이스 기기별로 수치는 피해야 한다!!)


@media screen and (min-width:1000px) {
  body{
    background: red;
  }
} 
/* 최소 1000 이상 빨개지는 거 */

@media screen and (min-width:500px) and (max-width:1000px) {
  body{
    background: green;
  }
} 
/* 500 이상 1000 이하 */

@media screen and (max-width:500px) {
  body{
    background: blue;
  }
}
/* 최대 500 (500보다 작다) */


1000~1400 
대부분 1200으로 만든다
메인 넓이를(ux)

가로에 스크롤바가 나오면 안 된다!!
의도하지 않는...

95%보다 작으면 안 되고 800px보다 커지면 안 된다
가급적이면 미디어 쿼리 사용 자제한다
공통적인 거는 한꺼번에 묶고 
미디어 쿼리 사용 안하고 할 수 있는 걸 생각해본다.


반응형에는 grid 최악임(비효율적임)
flex 사용

css를 잘해야 퍼블리싱으로 갈 수 있다...


canvas도 inline-block이다

----------------------------
3차원 형태로 뒤집는 거
filp

transform3D



backface-visibility: hidden;
      /* 
      rotateY나 rotateX를 사용할 때만 사용할 수 있는 속성 
      한번 숨기면 영원히 숨겨진다


transform-style: preserve-3d; /* 이걸 설정해야 뒷면이 나온다 */
transform-origin: left center; /* 변형의 축 x축, y축 */


perspective: 1000px; /* 원근감, 값이 작으면 작을수록 원근감이 커진다 */



css cube 만들기

transform은 자기 기준이다.

-----------------------------
svg
벡터를 출력하는 방식

웹gl, 웹그래픽

캔버스, svg

도형, 자잘한 거는 svg

canvas는 화면 전체, 게임 만들 때, 고급진 거

svg->inline block레벨

xml 문법 
셀프 클로징 <input />
단독 태그 

svg안의 속성
viewbox 
가로 세로 비율 알려주는 거
넓이만 바꾸면 높이가 알아서 바뀐다.
넓이나 높이 하나만 알려주면 알아서 바꿔준다.


원래 사이즈
레이티오를 유지하기 위한 목적이다.

preserveAspectRatio=""
크기를 다 지정했을 때 사용함
가로, 세로 비율을 깰 때 사용!!

preserveAspectRatio="none"


점선은 무한 반복된다
점선 offset을 하면 점선이 밀린다
그러면 움직이는 것처럼 보인다
stroke-dashoffset: -800px;


pathLength=""
길이를 몇으로 우기겠다. 내가 길이를 모를 때

